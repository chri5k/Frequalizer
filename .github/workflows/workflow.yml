name: CMake

on: [push, pull_request]

env:
  BUILD_TYPE: Release
  PRODUCT: Frequalizer
  BUNDLE: com.foleysfinest.frequalizer
  VERSION: 1.1.0
  OUTPUT_PATH: build/frequalizer_artefacts/Release

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy: 
      matrix:
        include:
        - os: macos-latest
          INSTALLER_NAME: Frequalizer_OSX.pkg
        - os: windows-latest
          INSTALLER_NAME: Frequalizer_WIN.exe

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Build Environment
      run: cmake -E make_directory ${{ runner.workspace }}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Codesign (macos)
      if: runner.os == 'MacOS'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      env: 
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      run: |
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
        RANDOM_PWD=`date | md5`
        security create-keychain -p ${RANDOM_PWD} build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p ${RANDOM_PWD} build.keychain
        security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ${RANDOM_PWD} build.keychain

        /usr/bin/codesign --force -s "Developer ID Application" ${{ env.OUTPUT_PATH }}/AU/${{ env.PRODUCT }}.component -v
        /usr/bin/codesign --force -s "Developer ID Application" ${{ env.OUTPUT_PATH }}/VST3/${{ env.PRODUCT }}.vst3 -v

    - name: Package (macos)
      if: runner.os == 'MacOS'
      shell: bash
      env:
        INSTALL_DIR: /Library/Audio/Plug-Ins
      run: |
        pkgbuild --identifier ${{ env.BUNDLE }}.au --version ${{ env.VERSION }} --component ${{ env.OUTPUT_PATH }}/AU/${{ env.PRODUCT }}.component \
        --install-location "${INSTALL_DIR}/Components" ${{ env.OUTPUT_PATH }}/${{ env.PRODUCT }}.au.pkg 

        pkgbuild --identifier ${{ env.BUNDLE }}.vst3 --version ${{ env.VERSION }} --component ${{ env.OUTPUT_PATH }}/VST3/${{ env.PRODUCT }}.vst3 \
        --install-location "${{ env.INSTALL_DIR }}/VST3" ${{ env.OUTPUT_PATH }}/${{ env.PRODUCT }}.vst3.pkg 

        productbuild --synthesize \
        --package "${{ env.OUTPUT_PATH }}/${{ env.PRODUCT }}.au.pkg" \
        --package "${{ env.OUTPUT_PATH }}/${{ env.PRODUCT }}.vst3.pkg" \
        distribution.xml

        productbuild --distribution distribution.xml --package-path ${{ env.OUTPUT_PATH }} ${{ matrix.INSTALLER_NAME }}

    - name: InnoSetup Installer (Windows)
      if: runner.os == 'Windows'
      run: |
        "%programfiles(x86)%\Inno Setup 6\iscc.exe" /DBuildDir="${{ env.OUTPUT_PATH }}" "${{ github.workspace }}\Resources\InnoSetup.iss"
      shell: cmd

    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PRODUCT }} (${{runner.os}})
        path: ${{ matrix.INSTALLER_NAME }}
        if-no-files-found: error

